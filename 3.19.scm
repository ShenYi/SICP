(define (has-circle? sequence)
  (define (next node)
    (if (or (null? node) (not (pair? node)))
	'()
	(cdr node)))
  (define (hc? slow fast)
    (if (or (null? slow) (null? fast) (not (pair? slow)) (not (pair? fast)))
#f
    (if (eq? slow fast)
	#t
	(let ((next-slow (next slow))
	      (next-fast (next (next fast))))
	  (hc? next-slow next-fast)))))
  (let ((s (next sequence))
	(f (next (next sequence))))
    (hc? s f)))

(define a (cons 1 2))
(define b (cons 3 4))
(set-cdr! a b)
(set-cdr! b a)
(display (has-circle? a))
(display "hello")
(define a (cons 1 2))
(define b (cons 3 a))
(define c (cons 4 a))
(define d (cons b c))
(has-circle? d)