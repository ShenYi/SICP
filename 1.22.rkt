#lang racket
(define (is-prime n)
  (cond ((< n 2) false)
        ((= n 2) true)
        (else (is-prime-i n 3))))
(define (is-prime-i n test)
  (cond ((> (* test test) n) true)
    ((= (remainder n test) 0) false)
    (else (is-prime-i n (+ test 1)))))
(define (search-for-primes n count)
  (cond ((= (remainder n 2) 0) (search-for-primes (+ n 1) count))
        ((> count 0) 
         (cond ((is-prime n) (display n) (newline) (search-for-primes (+ n 2) (- count 1)))
               (else (search-for-primes (+ n 2) count))))
        ))
(define (prime-time n count)
  (prime-time-i n count (current-milliseconds)))
(define (prime-time-i n count start-time)
  (search-for-primes n count)
  (newline)
  (display "Elapsed-time:")
  (display (- (current-milliseconds) start-time))
  (newline))
(time (search-for-primes 1000000000000 3))
(time (search-for-primes 10000000000000 3))
(time (search-for-primes 100000000000000 3))
;(prime-time 10000000000 3)
;(prime-time 100000000000 3)
;(prime-time 1000000000000 3)