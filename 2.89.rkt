#lang racket
(define (variable? v) (symbol? v))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (install-polynomial-package)
  (define (make-poly variable term-list)
    (cons variable term-list))
  (define (variable p) (car p))
  (define (term-list p) (cdr p))
  
  (define (add-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
        (make-poly (variable p1)
                   (add-terms (term-list p1) (term-list p2)))
        (error "No same variable")))
  (define (sub-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
        (make-poly (variable p1)
                   (sub-terms (term-list p1) (term-list p2)))
        (error "Not same variable")))
  (define (mul-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
        (make-poly (variable p1)\
                   (mul-terms (term-list p1) (term-list p2)))))
  (define (tag p) (attach-tag 'polynomial p))
  (put 'add '(polynomial polynomial)
       (lambda (p1 p2) (tag (add-poly p1 p2))))
  (put 'sub '(polynomial polynomial)
       (lambda (p1 p2) (tag (sub-poly p1 p2))))
  (put 'mul '(polynomial polynomial)
       (lambda (p1 p2) (tag (mul-poly p1 p2))))
  'done)

(define (add-terms L1 L2)
  (cond ((empty-termlist? L1) L2)
        ((empty-termlist? L2) L1)
        (else
         (let ((t1 (first-term L1))
               (t2 (first-term L2)))
           (adjoin-term (add-term t1 t2) (add-terms (rest-terms L1) (rest-terms L2)))))))
(define (sub-terms L1 L2)
  (cond ((empty-termlist? L1) (negative-termlist L2))
        ((empty-termlist? L2) L1)
        (else (let ((t1 (first-term L1))
                    (t2 (first-term L2)))
                (adjoin-term (sub-term t1 t2) (sub-terms (rest-terms L1) (rest-terms L2)))))))
(define (add-term t1 t2)
  (+ t1 t2))
(define (sub-term t1 t2)
  (- t1 t2))

(define (mul-terms L1 L2)
  (
  