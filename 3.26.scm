(define (make-tree-node key value left-tree right-tree)
  (cons (cons key value) (cons left-tree right-tree)))
(define (key-tree tree)
  (car (car tree)))
(define (value-tree tree)
  (cdr (car tree)))
(define (left-tree tree)
  (car (cdr tree)))
(define (right-tree tree)
  (cdr (cdr tree)))
(define (empty-tree? tree)
  (null? (key-tree tree)))

(define (make-table)
  (make-tree-node '() '() '() '()))
(define (lookup keys table compare-func)
  (cond ((or (not (pair? table)) (null? (key-tree table))) (display "Not found"))
	((null? keys) (error "Key is empty"))
	(else
	 (let ((current-key (car keys))
	       (remain-keys (cdr keys))
	       (inner-key (key-tree table)))
	   (let ((compare-result (compare-func current-key inner-key)))
	     (cond ((= compare-result 0) 
		    (if (null? remain-keys)
			(value-tree table)
			(lookup remain-keys (value-tree table) compare-func)))
		   ((< compare-result 0) 
		    (lookup remain-keys (left-tree table) compare-func))
		   ((> compare-result 0)
		    (lookup remain-keys (right-tree table) compare-func))))))))

(define (insert! keys value table compare-func)
  (define (mt keys value)
    (let ((current-key (car keys))
	  (remain-keys (cdr keys)))
      (if (null? remain-keys)
	  (make-tree current-key value '() '())
	  (make-tree current-key (mt remain-keys value) '() '()))))
  (cond ((null? keys)
	 (error "Key Null"))
	((null? (key-tree table))
	 (set! table (mt keys value)))
	(else
	 (let ((current-key (car keys))
	       (remain-keys (cdr keys))
	       (inner-key (key-tree table)))
	   (let ((compare-result (compare-func current-key inner-key)))
	     (cond ((= compare-result 0)
		    (if (null? remain-keys)
			(set-value-tree! table value)
			(if (pair? (value-tree table))
			    (insert! remain-keys value (value-tree table) compare-func)
			    (set-value-tree! table (mt remain-keys value)))))
		   ((< compare-result 0)
		    (insert! keys value (left-tree table) compare-func))
		   ((> compare-result 0)
		    (insert! keys value (right-tree table) comparefunc))))))))