#lang racket
(define (deriv exp var)
  (display exp)
  (newline)
  (display var)
  (newline)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product (multiplier exp)
                        (deriv (multiplicand exp) var))
          (make-product (deriv (multiplier exp) var)
                        (multiplicand exp))))
        ((exponentiation? exp)
         (let ((b (base exp)) (e (exponent exp)))
           (make-product e (make-product (make-exponentiation b (- e 1)) (deriv b var)))))
        (else
         (newline)
         (display "unknown expression"))))

(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))

(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s))
(define (augend s) (caddr s))
(define (product? x)
  (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))
(define (multiplicand p) (caddr p))
(define (make-sum a1 a2)
  (cond ((and (number? a1) (= a1 0)) a2)
        ((and (number? a2) (= a2 0)) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list '+ a1 a2))))
(define (make-product m1 m2)
  (cond ((number? m1)
         (cond ((= m1 0) 0)
               ((= m1 1) m2)))
        ((number? m2)
         (cond ((= m2 0) 0)
               ((= m2 1) m1)))
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list '* m1 m2))))

(define (exponentiation? e)
  (and (pair? e) (eq? 'exp (car e))))
(define (base e)
  (cadr e))
(define (exponent e)
  (caddr e))
(define (make-exponentiation base exponent)
  (cond ((= exponent 0) 1)
        ((= exponent 1) base)
        (else (list 'exp base exponent))))

(deriv (list 'exp 'x 7) 'x)