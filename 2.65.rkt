#lang racket
(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))

(define (tree->list-2 tree)
  (define (copy-to-list tree result-list)
    (if (null? tree) result-list
        (copy-to-list (left-branch tree)
                      (cons (entry tree)
                            (copy-to-list (right-branch tree)
                                          result-list)))))
  (copy-to-list tree '()))

(define (list->tree elements)
  (car (partial-tree elements (length elements))))
(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left-elts (cdr left-result))
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elts))
                  (right-result (partial-tree (cdr non-left-elts)
                                              right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elts (cdr right-result)))
                (cons (make-tree this-entry left-tree right-tree)
                      remaining-elts))))))))
(list->tree (list 1 3 5 7 9 11))

(define (intersection-set set1 set2)
  (define (intersection-set-list l1 l2)
    (cond ((or (null? l1) (null? l2)) '())
          (else
           (let ((x1 (car l1))
                 (x2 (car l2)))
             (cond ((= x1 x2) (cons x1 (intersection-set-list (cdr l1) (cdr l2))))
                   ((> x1 x2) (intersection-set-list l1 (cdr l2)))
                   ((< x1 x2) (intersection-set-list (cdr l1) l2)))))))
  (let ((s1 (tree->list-2 set1))
        (s2 (tree->list-2 set2)))
    (let ((result-list (intersection-set-list s1 s2)))
      (list->tree result-list))))
           
(define (union-set set1 set2)
  (define (union-set-list l1 l2)
    (cond ((null? l1) l2)
          ((null? l2) l1)
          (else
           (let ((x1 (car l1))
                 (x2 (car l2)))
             (cond ((= x1 x2) (cons x1 (union-set-list (cdr l1) (cdr l2))))
                   ((< x1 x2) (cons x1 (union-set-list (cdr l1) l2)))
                   ((> x1 x2) (cons x2 (union-set-list l1 (cdr l2)))))))))
  (let ((s1 (tree->list-2 set1))
        (s2 (tree->list-2 set2)))
    (let ((result-list (union-set-list s1 s2)))
      (list->tree result-list))))